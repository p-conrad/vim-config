call plug#begin('~/.vim/bundle')
Plug 'vim-syntastic/syntastic'
Plug 'mattn/emmet-vim', { 'for': ['html', 'xhtml', 'css', 'php', 'eruby', 'scss'] }
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
Plug 'Shougo/neocomplete.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'itchyny/vim-haskell-indent', { 'for': 'haskell' }
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tacahiroy/ctrlp-funky'
Plug 'sjl/gundo.vim'
Plug 'tpope/vim-fugitive'
Plug 'danro/rename.vim'
Plug 'chaoren/vim-wordmotion'
Plug 'kana/vim-textobj-user'
  Plug 'kana/vim-textobj-line'
  Plug 'tkhren/vim-textobj-numeral'
Plug 'AndrewRadev/splitjoin.vim', { 'for': ['html', 'xhtml', 'php', 'eruby'] }
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'mhinz/vim-startify'
Plug 'machakann/vim-swap'
Plug 'ambv/black', { 'for': 'python' }

" Color schemes
Plug 'altercation/vim-colors-solarized'
Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Plug 'rakr/vim-one'
Plug 'crusoexia/vim-monokai'
call plug#end()

set background=dark
if has('gui_running')
	colorscheme one
	set guioptions-=r
	set guioptions-=L
	set guioptions-=T
	set guioptions-=m
	" Toggle the menu:
	nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
	if has('gui_macvim')
		set linespace=4
		set macligatures
		set guifont=Fira\ Code\ Regular:h12
		set expandtab
	else
		set linespace=2
		set guifont=Inconsolata\ 12
	endif
else
	colorscheme Tomorrow-Night
endif

filetype plugin indent on
packadd! matchit
set omnifunc=syntaxcomplete#Complete
syntax on
set autoindent
set nocompatible
set ruler
set scrolloff=2
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=longest:list,full
set wildignore+=*/tmp/*,*.o,*.so,*.swp,*.swo,*.zip,*/node_modules/*,*/.cache/*,*/__pycache__/*,*.pyc,*.pyo
set cursorline
set ttyfast
set backspace=indent,eol,start
set laststatus=2
set statusline=%.35F[%{strlen(&fenc)?&fenc:'none'},%{&ff}]%h%m%r%y%{fugitive#statusline()}%{SyntasticStatuslineFlag()}%*%=%c,%l/%L\ %P

" Hybrid line numbering including automatic toggling
" Source: https://jeffkreeftmeijer.com/vim-number/
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Always switch to the directory of the current file
set autochdir
" autocmd BufEnter * silent! lcd %:p:h

let mapleader = "-"
let maplocalleader = "\\"

" Searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
" Search for highlighted text (will not work with backspaces)
vnoremap // y/\V<C-R>"<CR>
" Search for copied text
nnoremap // /<C-R>0<cr>

" Text formatting
set wrap
set textwidth=120
set colorcolumn=120
set formatoptions=qnmM1jc
" r: comment after enter, q: allow formatting with gq, n: recognize lists
" m: break multi-byte characters, M: no space after multi-byte char when joining lines
" 1: don't break afer one-letter word, j: remove comment leader when joining lines
" tc: format text and comments
" -> :help fo-table
set linebreak
set breakat+=>
let &showbreak='>> '
set breakindent
set breakindentopt=shift:-3

" Tab length
set tabstop=4 shiftwidth=4
augroup FileTypeGroup
	autocmd!
	autocmd FileType html,xhtml,php,eruby setlocal tabstop=2 shiftwidth=2 | set colorcolumn=0
	autocmd FileType haskell setlocal expandtab
	autocmd FileType plaintex,tex set textwidth=100 | set formatoptions+=t
augroup END
" Show invisibles
set listchars=tab:»\ ,eol:¬,nbsp:•
nnoremap <leader>l :set list!<cr>

" Line break at cursor
nnoremap <return> i<cr><esc>

" Fold tag
nnoremap <leader>ft Vatzf

" Indentation
nnoremap <leader>it vit=
nnoremap <leader>iT vat=
nnoremap <C-tab> gg=G
set cinoptions+={-1s}
set cinoptions+=(0

" Open/Close folds
nnoremap <space> za

" Splits
set splitbelow
set splitright
set winminheight=0
nnoremap <leader>wr <C-w>r
nnoremap <M-r> <C-w>r
nnoremap <leader>_ <C-w>_
nnoremap <leader>\| <C-w>\|
nnoremap <leader>= <C-w>=

" Navigating splits
nnoremap <C-s> <C-w>h
nnoremap <C-t> <C-w>l
nnoremap <C-n> <C-w>j
nnoremap <C-r> <C-w>k
"nnoremap <C-N> <C-w>j<C-w>_
"nnoremap <C-R> <C-w>k<C-w>_

" Remap 'redo' since we are using <C-r> for navigation now
nnoremap <C-j> <C-r>

" Resizing splits
nnoremap <silent> <M-Left> :vertical resize -5<cr>
nnoremap <silent> <M-Right> :vertical resize +5<cr>
nnoremap <silent> <M-Up> :resize +5<cr>
nnoremap <silent> <M-Down> :resize -5<cr>
nnoremap <silent> <leader>1 <C-w>h:exec "vertical resize " . (&columns * 8/16)<cr>
nnoremap <silent> <leader>2 <C-w>h:exec "vertical resize " . (&columns * 9/16)<cr>
nnoremap <silent> <leader>3 <C-w>h:exec "vertical resize " . (&columns * 10/16)<cr>
nnoremap <silent> <leader>4 <C-w>h:exec "vertical resize " . (&columns * 11/16)<cr>
nnoremap <silent> <leader>5 <C-w>h:exec "vertical resize " . (&columns * 12/16)<cr>

" Close buffer
nnoremap <M-q> :q<cr>
nnoremap <leader>q :q<cr>

" Exit to normal mode
inoremap … <esc>

" Disable IME automatically when leaving insert mode on MacVim
" -> https://rcmdnk.com/blog/2017/03/10/computer-mac-vim/
if has('mac')
	let g:imeoff = 'osascript -e "tell application \"System Events\" to key code 102"'
	augroup MyIMEGroup
		autocmd!
		autocmd InsertLeave * :call system(g:imeoff)
	augroup END
endif

" Open .vimrc
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>eV :vsp $MYVIMRC<cr>

" Disable help key
inoremap <f1> <esc>
nnoremap <f1> <esc>
vnoremap <f1> <esc>

" Paste stuff directly from insert mode
inoremap <leader>p <esc>pa
inoremap <leader>P <esc>"0pa
inoremap <leader>sp <esc>"*pa

" Paste last yanked text, cut without yanking to the buffer
nnoremap gp "0p
nnoremap gx "_x

" highlight last inserted text
nnoremap gV `[v`]

" Open quickfix/location list
nnoremap <M-c> :copen<cr>
nnoremap <M-l> :lopen<cr>

" Split a tag into multiple lines
inoremap <S-cr> <cr><esc>O

" tee hack to save a file even when it's opened read-only (e.g. forgetting sudo)
cmap w!! w !sudo tee >/dev/null %

" prevent accidentally writing a backtick when trying to save
cmap w´ w

" delete and move one line up
nnoremap dD ddk

" Ctrl-P setup
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['htdocs']
let g:ctrlp_extensions = ['funky']
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1

nnoremap <C-b> :CtrlPBuffer<cr>
nnoremap <C-f> :CtrlPFunky<cr>
nnoremap <M-f> :execute 'CtrlPFunky ' . expand('<cword>')<cr>

" toggle undo
nnoremap <M-u> :GundoToggle<cr>
nnoremap <leader>u :GundoToggle<cr>

" Git commands
nnoremap <M-g>s :Gstatus<cr>
nnoremap <M-g>c :Gcommit<cr>
nnoremap <M-g>p :Gpush<cr>
nnoremap <M-g>l :Glog<cr>
nnoremap <M-g>b :Gblame<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <M-g>d :Gdiff<cr>

" Syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_html_checkers = ['htmlhint']
let g:syntastic_html_htmlhint_args = '--config ~/.vim/rc/htmlhintrc'
let g:syntastic_html_tidy_ignore_errors = ['proprietary attribute']
let g:syntastic_css_csslint_args = '--ignore="box-model,box-sizing,universal-selector,adjoining-classes"'
autocmd BufNewFile,BufRead htmlhintrc set filetype=json
nnoremap <M-s>c :SyntasticCheck<cr>
nnoremap <M-s>r :SyntasticReset<cr>
nnoremap <M-s>t :SyntasticToggleMode<cr>
nnoremap <leader>sc :SyntasticCheck<cr>
nnoremap <leader>sr :SyntasticReset<cr>
nnoremap <leader>st :SyntasticToggleMode<cr>

" Session Management
nnoremap <M-s>o :SessionOpen 
nnoremap <M-s>s :SessionSave 
nnoremap <leader>so :SessionOpen 
nnoremap <leader>ss :SessionSave 

" Neocomplete
let g:cp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
	return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
endfunction
" Tab completion
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" Map adjustments for the Neo 2 keyboard layout
no s h
no h s
no n j
no j n
no r k
no k r
no t l
no l t

no S H
no H S
no N J
no J N
no R K
no K R
no T L
no L T

no gn gj
no gr gk

" Emmet customization
augroup EmmetSource
	autocmd!
	autocmd FileType html,xhtml,css,php,eruby,scss source ~/.vim/rc/emmet_custom
augroup END

" Hashbang
source ~/.vim/rc/hashbang

"Sessions
let g:session_autosave = 'no'
let g:session_command_aliases = 1
