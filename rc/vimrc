" Plugins and externally sourced files == {{
call plug#begin('~/.vim/bundle')
" Generally useful extensions
Plug 'preservim/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'danro/rename.vim'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'
Plug 'tpope/vim-sleuth'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Text-editing convenience
Plug 'kana/vim-textobj-user'
  Plug 'kana/vim-textobj-line'
  Plug 'tkhren/vim-textobj-numeral'
Plug 'chaoren/vim-wordmotion'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'LunarWatcher/auto-pairs'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'machakann/vim-swap'

" Language-specific tools
Plug 'mattn/emmet-vim', { 'for': ['html', 'xhtml', 'css', 'php', 'eruby', 'scss'] }
Plug 'ambv/black', { 'for': 'python' }

" Some interesting stuff to look into:
" https://github.com/svermeulen/vim-easyclip
" https://github.com/stsewd/fzf-checkout.vim

" Color schemes
Plug 'altercation/vim-colors-solarized'
Plug 'rakr/vim-one'
Plug 'crusoexia/vim-monokai'
Plug 'skielbasa/vim-material-monokai'
Plug 'NLKNguyen/papercolor-theme'
call plug#end()

packadd! matchit
source ~/.vim/rc/hashbang.vim

augroup WebdevSettings
	autocmd!
	autocmd FileType html,xhtml,css,php,eruby,scss source ~/.vim/rc/webdev.vim
augroup END
" == }}

" Appearance settings
if has('gui_running')
	set background=light
	colorscheme PaperColor
	" r: right-hand scroll bar, L: left-hand scroll bar, T: toolbar, m: menu
	set guioptions-=r
	set guioptions-=L
	set guioptions-=T
	set guioptions-=m
	" Toggle the menu:
	nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
	set guifont=Fira\ Code\ 11
	set linespace=2
else
	set background=dark
	colorscheme one
endif

filetype plugin indent on
syntax on

" Generally usefull settings (mostly taken from Steve Losh)
set termguicolors
set autoindent
set scrolloff=2
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=longest:list,full
set wildignore+=*/tmp/*,*.o,*.so,*.swp,*.swo,*.zip,*/node_modules/*,*/.cache/*,*/__pycache__/*,*.pyc,*.pyo
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set undofile
set undodir=$HOME/.vim/undo
set backup
set backupdir=$HOME/.vim/backup
set directory=$HOME/.vim/swap

" Statusline
set statusline=%.35F
set statusline+=[%{strlen(&fenc)?&fenc:'none'},%{&ff}]
set statusline+=%h%m%r%y
set statusline+=%{fugitive#statusline()}
set statusline+=%=
set statusline+=%c,%l/%L\ %P

" Hybrid line numbering including automatic toggling
" Source: https://jeffkreeftmeijer.com/vim-number/
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * if &ft !~ '^nerdtree$' && &ft !~ '^help$' | set relativenumber | endif
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Always switch to the directory of the current file
" autochdir breaks NERDTree, so we use autocmd instead
autocmd BufEnter * if &ft !~ '^nerdtree$' | silent! lcd %:p:h | endif

" Leader settings
let mapleader = " "
let maplocalleader = "\\"

" Searching
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap / /\v
vnoremap / /\v
nnoremap <leader>h :noh<cr>
" Search for highlighted text (will not work with backspaces)
vnoremap // y/\V<C-R>"<CR>
" Search for copied text
nnoremap // /<C-R>0<cr>

" Text formatting and indentation == {{
set wrap
set textwidth=100
set colorcolumn=100
set formatoptions=rqnmM1jc
" r: comment after enter, q: allow formatting with gq, n: recognize lists
" m: break multi-byte characters, M: no space after multi-byte char when joining lines
" 1: don't break afer one-letter word, j: remove comment leader when joining lines
" tc: format text and comments
" -> :help fo-table
set linebreak
set showbreak=↪
set breakindent
set breakindentopt=shift:-1
set listchars=tab:»\ ,eol:¬,nbsp:•,trail:◆
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab

" Settings specific to web development
augroup WebdevGroup
	autocmd!
	autocmd FileType html,xhtml,php,eruby setlocal tabstop=2 shiftwidth=2 softtabstop=2 colorcolumn=0
augroup END

" C Indentation (TODO: might revise in the future when it becomes necessery)
set cinoptions+={-1s}
set cinoptions+=(0
" == }}

" Splits == {{
set splitbelow
set splitright
set winminheight=0

" Open a new split and focus it
nnoremap <leader>wh <C-w>s<C-w>n
nnoremap <leader>ww <C-w>v<C-w>l

" Rotation
nnoremap <leader>wr <C-w>r
nnoremap <M-r> <C-w>r

" Navigating splits
nnoremap <C-s> <C-w>h
nnoremap <C-t> <C-w>l
nnoremap <C-n> <C-w>j
nnoremap <C-r> <C-w>k

" Remap 'redo' since we are using <C-r> for navigation now
nnoremap <C-j> <C-r>

" Resizing splits
nnoremap <leader>_ <C-w>_
nnoremap <leader>\| <C-w>\|
nnoremap <leader>= <C-w>=
nnoremap <silent> <M-Left> :vertical resize -5<cr>
nnoremap <silent> <M-Right> :vertical resize +5<cr>
nnoremap <silent> <M-Up> :resize +5<cr>
nnoremap <silent> <M-Down> :resize -5<cr>
nnoremap <silent> <leader>1 <C-w>h:exec "vertical resize " . (&columns * 8/16)<cr>
nnoremap <silent> <leader>2 <C-w>h:exec "vertical resize " . (&columns * 9/16)<cr>
nnoremap <silent> <leader>3 <C-w>h:exec "vertical resize " . (&columns * 10/16)<cr>
nnoremap <silent> <leader>4 <C-w>h:exec "vertical resize " . (&columns * 11/16)<cr>
nnoremap <silent> <leader>5 <C-w>h:exec "vertical resize " . (&columns * 12/16)<cr>
" == }}

" Open/close folds
nnoremap <leader>z za

" Closing and deleting buffers
nnoremap <leader>q :q<cr>
nnoremap <leader>d :bdelete<cr>

" Highlight last inserted text
nnoremap gV `[v`]

" Reverse a range of line (assuming the row above is marked with t -> :help 12.4)
nnoremap <leader>r :'t+1,.g/^/m 't<cr>

" Some ways to exit to normal mode
inoremap … <esc>
inoremap <f1> <esc>
nnoremap <f1> <esc>
vnoremap <f1> <esc>

" Using the integrated terminal (x for 'execute')
nnoremap <leader>xo :exec "term ++rows=" . (&lines * 1/3)<cr>
nnoremap <leader>xr :term

" Insert text into the command line for quick testing
nnoremap <leader>: ^yg_:<C-r>"
vnoremap <leader>: y:<C-r>"

" Tee hack to save a file even when it's opened read-only (e.g. forgetting sudo)
cmap w!! w !sudo tee >/dev/null %

" Open .vimrc
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>eV :vsp $MYVIMRC<cr>

" NEO 2 adjustments == {{
" Intuitive down/up behaviour but without breaking counts
noremap <expr> n (v:count == 0 ? 'gj' : 'j')
noremap <expr> r (v:count == 0 ? 'gk' : 'k')

noremap s h
noremap h s
"noremap n j
noremap j n
"noremap r k
noremap k r
noremap t l
noremap l t

noremap S H
noremap H S
noremap N J
noremap J N
noremap R K
noremap K R
noremap T L
noremap L T
" == }}


" Plugin configuration starts here
" NERDTree
nnoremap <M-t> :NERDTreeToggle .<cr>
nnoremap <leader>t :NERDTreeToggle .<cr>
nnoremap <M-T> :NERDTreeToggleVCS .<cr>
nnoremap <leader>T :NERDTreeToggleVCS .<cr>
let NERDTreeQuitOnOpen = 1
let NERDTreeMapRefresh = 'l'
let NERDTreeMapRefreshRoot = 'L'
let NERDTreeMenuDown = 'n'
let NERDTreeMenuUp = 'r'
let NERDTreeMapJumpLastChild = 'N'
let NERDTreeMapJumpFirstChild = 'R'
"let NERDTreeMapJumbNextSibling = '<C-N>'
"let NERDTreeMapJumbPrevSibling = '<C-R>'
augroup NerdTreeGroup
	autocmd!
	" Start NERDTree, unless a file or session is specified, eg. vim -S session_file.vim.
	autocmd StdinReadPre * let s:std_in=1
	autocmd VimEnter * if argc() == 0 && !exists('s:std_in') && v:this_session == '' | NERDTree | endif
	" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
	autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 | 
				\ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
augroup END

" Git commands
" for reference on remapping: https://github.com/tpope/vim-fugitive/issues/1080
let g:nremap = {'r': 'b'}
nnoremap <leader>gg :Git<space>
nnoremap <leader>gs :Git status<cr>
nnoremap <leader>gc :Git commit<cr>
nnoremap <leader>gp :Git push<cr>
nnoremap <leader>gl :Git log<cr>
nnoremap <leader>gb :Git blame<cr>
nnoremap <leader>gd :Git diff<cr>

" Session Management
let g:session_autosave = 'yes'
let g:session_command_aliases = 1
nnoremap <leader>so :OpenSession<space>
nnoremap <leader>ss :SaveSession<space>
nnoremap <leader>sc :CloseSession<cr>
nnoremap <leader>sto :OpenTabSession<space>
nnoremap <leader>sts :SaveTabSession<space>
nnoremap <leader>stc :CloseTabSession<cr>
nnoremap <leader>sr :RestartVim<cr>

" Auto-Pairs
let g:AutoPairsMapBS = 1

" FZF == {{
" maybe TODO: C-p is a auto-pairs prefix and only works with a delay
nnoremap <C-p> :Files<cr>
nnoremap <C-b> :Buffers<cr>
nnoremap <C-S-p> :Commands<cr>
nnoremap <leader>fb :Buffers<cr>
nnoremap <leader>fcb :BCommits<cr>
nnoremap <leader>fcc :Commits<cr>
nnoremap <leader>ff :Files<cr>
nnoremap <leader>fh :History<cr>
nnoremap <leader>flb :BLines<cr>
nnoremap <leader>fll :Lines<cr>
nnoremap <leader>fm :Marks<cr>
nnoremap <leader>fr :Rg<cr>
"nnoremap <leader>fs :Snippets<cr>
nnoremap <leader>ft :Tags<cr>
" Some more interesting ones to keep in mind: Colors, Filetypes, Helptags, Locate, Maps

" Make fzf match the current color theme
let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" Automatically adapt fzf's bat theme to dark/light backgrounds
augroup update_bat_theme
	autocmd!
	autocmd VimEnter,ColorScheme * call ToggleBatEnvVar()
augroup end
function ToggleBatEnvVar()
	if (&background == "light")
		let $BAT_THEME='Monokai Extended Light'
	else
		let $BAT_THEME=''
	endif
endfunction
" == }}
