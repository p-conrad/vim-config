call plug#begin('~/.vim/bundle')
" Generally useful extensions
Plug 'scrooloose/nerdtree'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tacahiroy/ctrlp-funky'
Plug 'tpope/vim-fugitive'
Plug 'danro/rename.vim'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

" Text-editing convenience
Plug 'kana/vim-textobj-user'
  Plug 'kana/vim-textobj-line'
  Plug 'tkhren/vim-textobj-numeral'
Plug 'chaoren/vim-wordmotion'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'machakann/vim-swap'


" Language-specific tools
Plug 'mattn/emmet-vim', { 'for': ['html', 'xhtml', 'css', 'php', 'eruby', 'scss'] }
Plug 'ambv/black', { 'for': 'python' }
Plug 'neoclide/coc.nvim', { 'branch': 'release' }

" Some interesting stuff to look into:
" https://github.com/svermeulen/vim-easyclip
" https://github.com/stsewd/fzf-checkout.vim

" Color schemes
Plug 'altercation/vim-colors-solarized'
Plug 'rakr/vim-one'
Plug 'crusoexia/vim-monokai'
Plug 'skielbasa/vim-material-monokai'
Plug 'NLKNguyen/papercolor-theme'
Plug 'arcticicestudio/nord-vim'
call plug#end()

if has('gui_running')
	set background=light
	colorscheme PaperColor
	set guioptions-=r
	set guioptions-=L
	set guioptions-=T
	set guioptions-=m
	" Toggle the menu:
	nnoremap <C-F1> :if &go=~#'m'<Bar>set go-=m<Bar>else<Bar>set go+=m<Bar>endif<CR>
	set guifont=Fira\ Code\ 11
	set linespace=2
	if has('gui_macvim')
		set linespace=4
		set macligatures
		set expandtab
	endif
else
	set background=dark
	colorscheme nord
endif

filetype plugin indent on
packadd! matchit
set omnifunc=syntaxcomplete#Complete
syntax on
set termguicolors
set autoindent
set ruler
set scrolloff=2
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=longest:list,full
set wildignore+=*/tmp/*,*.o,*.so,*.swp,*.swo,*.zip,*/node_modules/*,*/.cache/*,*/__pycache__/*,*.pyc,*.pyo
set cursorline
set ttyfast
set backspace=indent,eol,start
set laststatus=2

" Statusline
set statusline=%.35F
set statusline+=[%{strlen(&fenc)?&fenc:'none'},%{&ff}]
set statusline+=%h%m%r%y
set statusline+=%{fugitive#statusline()}
set statusline+=[%{coc#status()}%{get(b:,'coc_current_function','')}]
set statusline+=%=
set statusline+=%c,%l/%L\ %P

" Hybrid line numbering including automatic toggling
" Source: https://jeffkreeftmeijer.com/vim-number/
set number relativenumber
augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * if &ft !~ '^nerdtree$' && &ft !~ '^help$' | set relativenumber | endif
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" Always switch to the directory of the current file
" autochdir breaks NERDTree, so we use autocmd instead
autocmd BufEnter * if &ft !~ '^nerdtree$' | silent! lcd %:p:h | endif

let mapleader = " "
let maplocalleader = "\\"

" Searching
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap / /\v
vnoremap / /\v
nnoremap <leader>h :noh<cr>
" Search for highlighted text (will not work with backspaces)
vnoremap // y/\V<C-R>"<CR>
" Search for copied text
nnoremap // /<C-R>0<cr>

" Text formatting
set wrap
set textwidth=120
set colorcolumn=120
set formatoptions=rqnmM1jc
" r: comment after enter, q: allow formatting with gq, n: recognize lists
" m: break multi-byte characters, M: no space after multi-byte char when joining lines
" 1: don't break afer one-letter word, j: remove comment leader when joining lines
" tc: format text and comments
" -> :help fo-table
set linebreak
set breakat+=>
set showbreak=↪
set breakindent
set breakindentopt=shift:-1

" list chars
set listchars=tab:»\ ,eol:¬,nbsp:•,trail:◆

" Tab length
set tabstop=4 shiftwidth=4 softtabstop=4
augroup IndentGroup
	autocmd!
	autocmd FileType html,xhtml,php,eruby setlocal tabstop=2 shiftwidth=2 softtabstop=2
	autocmd FileType haskell setlocal expandtab
	autocmd FileType plaintex,tex set textwidth=100
augroup END

" File type specific settings
augroup FileTypeGroup
	autocmd!
	autocmd FileType html,xhtml,php,eruby setlocal colorcolumn=0
	autocmd FileType plaintex,tex set formatoptions+=t
augroup END

" Load Emmet shortcuts and other settings specific to HTML/CSS files
augroup WebdevGroup
	autocmd!
	autocmd FileType html,xhtml,css,php,eruby,scss source ~/.vim/rc/webdev.vim
augroup END

" Line break at cursor
nnoremap <return> i<cr><esc>

" Indentation
nnoremap <leader>it vit=
nnoremap <leader>iT vat=
set cinoptions+={-1s}
set cinoptions+=(0

" Open/Close folds
nnoremap <leader>z za

" Splits
set splitbelow
set splitright
set winminheight=0
nnoremap <leader>wr <C-w>r
nnoremap <M-r> <C-w>r
nnoremap <leader>_ <C-w>_
nnoremap <leader>\| <C-w>\|
nnoremap <leader>= <C-w>=

" Navigating splits
nnoremap <C-s> <C-w>h
nnoremap <C-t> <C-w>l
nnoremap <C-n> <C-w>j
nnoremap <C-r> <C-w>k

" Remap 'redo' since we are using <C-r> for navigation now
nnoremap <C-j> <C-r>

" Resizing splits
nnoremap <silent> <M-Left> :vertical resize -5<cr>
nnoremap <silent> <M-Right> :vertical resize +5<cr>
nnoremap <silent> <M-Up> :resize +5<cr>
nnoremap <silent> <M-Down> :resize -5<cr>
nnoremap <silent> <leader>1 <C-w>h:exec "vertical resize " . (&columns * 8/16)<cr>
nnoremap <silent> <leader>2 <C-w>h:exec "vertical resize " . (&columns * 9/16)<cr>
nnoremap <silent> <leader>3 <C-w>h:exec "vertical resize " . (&columns * 10/16)<cr>
nnoremap <silent> <leader>4 <C-w>h:exec "vertical resize " . (&columns * 11/16)<cr>
nnoremap <silent> <leader>5 <C-w>h:exec "vertical resize " . (&columns * 12/16)<cr>

" Close buffer
nnoremap <M-q> :q<cr>
nnoremap <leader>q :q<cr>
nnoremap <M-d> :bdelete<cr>
nnoremap <leader>d :bdelete<cr>

" Exit to normal mode
inoremap … <esc>

" Open .vimrc
nnoremap <leader>ev :e $MYVIMRC<cr>
nnoremap <leader>eV :vsp $MYVIMRC<cr>

" Disable help key
inoremap <f1> <esc>
nnoremap <f1> <esc>
vnoremap <f1> <esc>

" Paste last yanked text, cut without yanking to the buffer
nnoremap gp "0p
vnoremap gx "_x

" highlight last inserted text
nnoremap gV `[v`]

" Open quickfix/location list
nnoremap <M-c> :copen<cr>
nnoremap <M-l> :lopen<cr>

" tee hack to save a file even when it's opened read-only (e.g. forgetting sudo)
cmap w!! w !sudo tee >/dev/null %

" delete and move one line up
nnoremap dD ddk

" NERDTree
nnoremap <M-t> :NERDTreeToggle .<cr>
nnoremap <leader>t :NERDTreeToggle .<cr>
nnoremap <M-T> :NERDTreeToggleVCS .<cr>
nnoremap <leader>T :NERDTreeToggleVCS .<cr>
let NERDTreeQuitOnOpen = 1
let NERDTreeMapRefresh = 'l'
let NERDTreeMapRefreshRoot = 'L'
let NERDTreeMenuDown = 'n'
let NERDTreeMenucUp = 'r'
let NERDTreeMapJumpLastChild = 'N'
let NERDTreeMapJumpFirstChild = 'R'
"let NERDTreeMapJumbNextSibling = '<C-N>'
"let NERDTreeMapJumbPrevSibling = '<C-R>'
augroup NerdTreeGroup
	autocmd!
	" Start NERDTree, unless a file or session is specified, eg. vim -S session_file.vim.
	autocmd StdinReadPre * let s:std_in=1
	autocmd VimEnter * if argc() == 0 && !exists('s:std_in') && v:this_session == '' | NERDTree | endif
	" If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
	autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 | 
				\ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif
augroup END

" Ctrl-P setup
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_root_markers = ['pom.xml', 'htdocs']
let g:ctrlp_extensions = ['funky']
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1

nnoremap <C-b> :CtrlPBuffer<cr>
nnoremap <C-f> :CtrlPFunky<cr>
nnoremap <M-f> :execute 'CtrlPFunky ' . expand('<cword>')<cr>

" Git commands
" for reference on remapping: https://github.com/tpope/vim-fugitive/issues/1080
let g:nremap = {'r': 'b'}
nnoremap <leader>gg :Git 
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gc :Gcommit<cr>
nnoremap <leader>gp :Gpush<cr>
nnoremap <leader>gl :Glog<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gd :Gdiff<cr>

" Session Management
let g:session_autosave = 'yes'
let g:session_command_aliases = 1
nnoremap <leader>so :OpenSession 
nnoremap <leader>ss :SaveSession 
nnoremap <leader>sc :CloseSession<cr>
nnoremap <leader>sto :OpenTabSession 
nnoremap <leader>sts :SaveTabSession 
nnoremap <leader>stc :CloseTabSession<cr>
nnoremap <leader>sr :RestartVim<cr>

" Using the integrated terminal (x is for 'execute')
nnoremap <leader>xo :exec "term ++rows=" . (&lines * 1/3)<cr>
" TODO: Specify line height here as well
nnoremap <leader>xr :term

" reverse a range of line (assuming the row above is marked with t -> :help 12.4)
nnoremap <leader>r :'t+1,.g/^/m 't<cr>

" Map adjustments for the Neo 2 keyboard layout
nnoremap s h
nnoremap h s
nnoremap n j
nnoremap j n
nnoremap r k
nnoremap k r
nnoremap t l
nnoremap l t

nnoremap S H
nnoremap H S
nnoremap N J
nnoremap J N
nnoremap R K
nnoremap K R
nnoremap T L
nnoremap L T

nnoremap gn gj
nnoremap gr gk

" Hashbang
source ~/.vim/rc/hashbang.vim

" CoC
source ~/.vim/rc/coc_settings.vim
